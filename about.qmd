---
title: "Assigments"
---

About Veronica 




## Assignment 1

<iframe src="https://docs.google.com/presentation/d/e/2PACX-1vR6ZxRZizo6AtTs_4ln7472DOEXbLdQ2oP12-tEqI1c6256Sb13wGNYim-GrHgZUxuBWVSynlzFAvQI/embed?start=false&amp;loop=false&amp;delayms=3000" frameborder="0" width="960" height="569" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true">

</iframe>

## Assignment 2

<iframe src="https://docs.google.com/presentation/d/e/2PACX-1vQU0QN_mcruQqvjpqUB4HubFYaqgPyVSsevJTg1YmM1E1E_Ujhy_0k2oLn-2_FMIFG9h37hfIjpOyVG/embed?start=false&amp;loop=false&amp;delayms=3000" frameborder="0" width="960" height="569" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true">

</iframe>

## Assignment 3

#### 2. Write SQL codes to get a list of:

i\. Students IDs (hint: from the **takes** relation)

SELECT DISTINCT ID FROM takes;

ii\. Instructors

SELECT ID, name, dept_name, salary FROM instructor;

iii\. Departments

SELECT dept_name, building, budget FROM department;

#### 

2.  Write in SQL codes to do following queries:

i\. SELECT DISTINCT s.ID, s.name FROM student s JOIN takes t ON s.ID = t.ID JOIN course c ON t.course_id = c.course_id WHERE c.dept_name = 'Comp. Sci.';

ii\.

SELECT DISTINCT s.ID, s.name, t.grade FROM student s JOIN takes t ON s.ID = t.ID JOIN course c ON t.course_id = c.course_id WHERE c.dept_name = 'Comp. Sci.';

iii\.

SELECT s.ID, s.name FROM student s WHERE NOT EXISTS ( SELECT 1 FROM takes t JOIN section sec ON t.course_id = sec.course_id AND t.sec_id = sec.sec_id AND t.semester = sec.semester AND t.year = sec.year WHERE t.ID = s.ID AND sec.year \< 2017

);

iv\.

SELECT dept_name, MAX(salary) AS max_salary FROM instructor GROUP BY dept_name;

v\.

SELECT MIN(max_salary) AS lowest_max_salary FROM ( SELECT MAX(salary) AS max_salary FROM instructor GROUP BY dept_name ) AS department_max_salaries;

vi\.

SELECT dept_name, MAX(salary) AS max_salary FROM instructor GROUP BY dept_name HAVING MAX(salary) = ( SELECT MIN(max_salary) FROM ( SELECT MAX(salary) AS max_salary FROM instructor GROUP BY dept_name ) AS department_max_salaries

4.  

SELECT DISTINCT i.ID, i.name FROM instructor i LEFT JOIN teaches t ON i.ID = t.ID LEFT JOIN takes tk ON t.course_id = tk.course_id AND t.sec_id = tk.sec_id AND t.semester = tk.semester AND t.year = tk.year WHERE tk.grade \<\> 'A' OR tk.grade

## Assignment 4

1\.

A strong entity is an entry that can be use a unit way to identify a subject. That is not going to be used or share to as an entry for an other value. No duplication. For example ID, or email address.

A weak entry is the opposite, it can not be uniquely identify. For example a persons first name because some other person could have the same name.

2\.

-   **Player**

    Player ID (PK)

    Name

    Positon

-   **Game**

    GameID (PK)

    Date

    Location

    TeamID (FK)

-   **Team**

    TeamID (PK)

    Team Name

3\.

b\) SELECT s.ID FROM student s LEFT JOIN takes t ON s.ID = t.ID

c\) SELECT e.ID FROM employee e NATURAL LEFT JOIN manages m WHERE m.manager_id IS NULL;

## Assignment 5

1\.

Viewing this diagram as a graph, and the graph element helps us to understand relationships better.

a\) When the graph is discont it means there are two sets of entities and relationships that have no connections between them.

b\) When the graph has a cycle it means that there is a way of how the relationships flows and is all connected.

3\.

Weak entity are used because they have dependent relationship with another. They also apply to real world for example names is a person name even if someone else have the same name. It is not necessary to make change them into strong entities as long as some strong ones build the relationship.

4\.

i\. SELECT e.ID, e.person_name FROM employee AS e JOIN works AS w ON e.ID = w.ID JOIN company AS c ON w.company_name = c.company_name WHERE e.city = c.city;

ii\. SELECT e1.ID, e1.person_name FROM employee AS e1 JOIN manages AS m ON e1.ID = m.ID JOIN employee AS e2 ON m.manager_id = e2.ID WHERE e1.city = e2.city AND e1.street = e2.street;

iii. SELECT e.ID, e.person_name FROM employee AS e JOIN works AS w ON e.ID = w.ID WHERE w.salary \> ( SELECT AVG(w2.salary) FROM works AS w2 WHERE w2.company_name =

w.company_name);

b\) NATURAL JOIN doesn't make it clear which columns are being used for joining. Also the way JOIN was written.

## Assignment 6
